

String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete
const int tonePin = 2;
int toneNumber = -1;
void setup() {
  // initialize serial:
  Serial.begin(9600);
  // reserve 200 bytes for the inputString:
  inputString.reserve(200);
  pinMode(tonePin, OUTPUT);

}

  
#include "pitches.h"
int melody2[] = {
   NOTE_D3, NOTE_DS3, NOTE_C3, NOTE_B3};
// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations2[] = {
  4, 4, 4, 1
};
//inputstring =
// notes in the melody:
int melody1[] = {
    NOTE_D1, NOTE_B0 };
// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  4, 4,
};
int melody3[] = {
   NOTE_E3, NOTE_DS3, NOTE_A3, NOTE_A3};
// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations3[] = {
  4, 4, 4, 1
};


void loop() {
  

  serialEvent(); //call the function
  // print the string when a newline arrives:
  if (stringComplete) {
    inputString.trim();
    Serial.println(inputString);

    //when python sends message
    // if (message == "melody1")
    //play loop
    
    
    inputString = "";
    stringComplete = false;
  }
  
int sumNumber = 0;
sumNumber = inputString.toInt();

  if (toneNumber > -1) {
    tone(tonePin, toneNumber, 500);
    toneNumber = -1;
  }
  // no need to repeat the melody.
  //if stringcomplete
  
  if(sumNumber == 1){
   // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < 25; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(12, melody1[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(12);
  }
  if (sumNumber = 2){
    // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < 25; thisNote++) {

    // to calculate the note duration, take one second
    // divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(12, melody3[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(12);
  }
}
  }
  
   
}

void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    //inputString += inChar;


    if (inChar != '\n') {
      inputString += inChar;
    }

    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      stringComplete = true;
    }
  }
}

